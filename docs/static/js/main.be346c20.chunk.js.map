{"version":3,"sources":["js/App.js","js/serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","componentWillMount","state","darkBackgroundModes","lightBackgroundModes","backgroundType","Configs","appClass","plainBackgroundMode","devIntro","devDesc","backgroundMode","backgroundIndex","bgStyle","icons","tagLine","_this$state","react_default","a","createElement","className","style","index_es","type","bg","Typist_default","map","icon","i","target","key","rel","href","concat","url","class","image","Component","Boolean","window","location","hostname","match","ReactDOM","render","js_App","document","getElementById"],"mappings":"sSAoFeA,cA7Eb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KA+BRQ,mBAAqB,aA9BnBP,EAAKQ,MAAQ,CACXC,oBAAqB,CACnB,MACA,WACA,YACA,WACA,WACA,SACA,cAEFC,qBAAsB,CACpB,QACA,WACA,cACA,aACA,YACA,eAEFC,eAAgBC,EAAQD,eACxBE,SAAUD,EAAQE,oBAClBC,SAAUH,EAAQG,SAClBC,QAAUJ,EAAQI,QAClBC,eAAgB,UAChBC,gBAAiB,EACjBC,QAAS,GACTC,MAAOR,EAAQQ,OAAS,GACxBC,QAAST,EAAQS,SA5BFrB,wEAoCV,IAAAsB,EAGHnB,KAAKK,MADPK,EAFKS,EAELT,SAAUM,EAFLG,EAEKH,QAASF,EAFdK,EAEcL,eAAgBF,EAF9BO,EAE8BP,SAAUC,EAFxCM,EAEwCN,QAASI,EAFjDE,EAEiDF,MAAOC,EAFxDC,EAEwDD,QAG/D,OACEE,EAAAC,EAAAC,cAAA,OAAKC,UAAWb,EAAUc,MAAOR,GAC/BI,EAAAC,EAAAC,cAAA,OACEC,UAAWT,GAEXM,EAAAC,EAAAC,cAAA,QAAMC,UAAU,YACdH,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAaC,KAAK,QAAQC,IAAI,IAC9BP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SAASX,GACvBQ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAACM,EAAAP,EAAD,KAASH,IAEXE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACZV,GAGHO,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACZN,EAAMY,IAAI,SAACC,EAAMC,GAAP,OACTX,EAAAC,EAAAC,cAAA,KACEU,OAAO,SACPC,IAAKF,EACLG,IAAI,sBACJC,KAAI,GAAAC,OAAKN,EAAKO,MAEdjB,EAAAC,EAAAC,cAAA,KAAGgB,MAAK,GAAAF,OAAKN,EAAKS,wBAlEpBC,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAQ3B,EAAAC,EAAAC,cAAE0B,EAAF,MAAYC,SAASC,eAAe","file":"static/js/main.be346c20.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport Typist from 'react-typist';\nimport '../styles/App.css';\nimport Configs from '../data/configurations.json';\nimport ParticlesBg from 'particles-bg'\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      darkBackgroundModes: [\n        'day',\n        'terminal',\n        'torquoise',\n        'alizarin',\n        'amythyst',\n        'carrot',\n        'peterriver'\n      ],\n      lightBackgroundModes: [\n        'night',\n        'lightred',\n        'lightpurple',\n        'lightgreen',\n        'lightblue',\n        'lightyellow'\n      ],\n      backgroundType: Configs.backgroundType,\n      appClass: Configs.plainBackgroundMode,\n      devIntro: Configs.devIntro,\n      devDesc:  Configs.devDesc,\n      backgroundMode: 'default',\n      backgroundIndex: 0,\n      bgStyle: {},\n      icons: Configs.icons || [],\n      tagLine: Configs.tagLine\n    };\n  }\n\n  componentWillMount = () => {\n    \n  };\n\n  render() {\n    const {\n      appClass, bgStyle, backgroundMode, devIntro, devDesc, icons, tagLine\n    } = this.state;\n\n    return (\n      <div className={appClass} style={bgStyle}>\n        <div\n          className={backgroundMode}\n        >\n          <main className=\"App-main\">\n            <ParticlesBg type=\"lines\" bg={true} />\n            <div className=\"container\">\n              <h1 className=\"intro\">{devIntro}</h1>\n              <div className=\"shell\">\n                <Typist>{tagLine}</Typist>\n              </div>\n              <div className=\"tagline\">\n                {devDesc}\n              </div>\n              \n              <div className=\"icons-social\">\n                {icons.map((icon, i) => (\n                  <a\n                    target=\"_blank\"\n                    key={i}\n                    rel=\"noopener noreferrer\"\n                    href={`${icon.url}`}\n                  >\n                    <i class={`${icon.image}`} />\n                  </a>\n                ))}\n              </div>\n            </div>\n          </main>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './js/App';\nimport * as serviceWorker from './js/serviceWorker';\n\nReactDOM.render( < App / > , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n//serviceWorker.register();\n"],"sourceRoot":""}